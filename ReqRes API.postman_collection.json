{
	"info": {
		"_postman_id": "849a7c62-638d-41f0-b55d-0ccd6ad07129",
		"name": "ReqRes API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33405957"
	},
	"item": [
		{
			"name": "Aduce o lista de resurse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Data array is present and has the expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array');",
							"    pm.expect(responseData.data).to.have.lengthOf(1);",
							"});",
							"",
							"",
							"pm.test(\"Support object should exist and be an object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.support).to.exist.and.to.be.an('object');",
							"});",
							"",
							"",
							"pm.test(\"Verify data properties\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.be.an('array');",
							"    ",
							"    responseData.data.forEach(function(item) {",
							"        pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);",
							"        pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"        pm.expect(item.year).to.be.a('number').and.to.be.at.least(0);",
							"        pm.expect(item.color).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Color should not be empty\");",
							"        pm.expect(item.pantone_value).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Pantone value should not be empty\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/{resource}",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"{resource}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Aduce o lista de useri",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Data array in the response should exist and be an array\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.data).to.exist;",
							"    pm.expect(responseData.data).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.data.forEach(function(user) {",
							"        pm.expect(user.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Support object is present and contains expected fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.support).to.exist;",
							"    pm.expect(responseData.support.url).to.exist;",
							"    pm.expect(responseData.support.text).to.exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Aduce un user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"    pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required Content-Type header with value application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response body is an empty object\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object').that.is.empty;",
							"});",
							"",
							"",
							"pm.test(\"Ensure that the response body is a valid JSON\", function () {",
							"  pm.expect(pm.response.json()).to.not.be.null;",
							"});",
							"",
							"",
							"pm.test(\"Response does not contain sensitive information\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.not.include.keys('password', 'credit_card_number', 'ssn', 'security_question');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users/,",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						","
					]
				}
			},
			"response": []
		},
		{
			"name": "Aduce la zi intregul user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - updatedAt\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.updatedAt).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"UpdatedAt is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"UpdatedAt should be in valid date format\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users/{id}",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"{id}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Aduce la zi anumite informatii specifice ale unui user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - updatedAt\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.updatedAt).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"UpdatedAt field is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"UpdatedAt should be in valid date format\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users/{id}",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"{id}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sterge un user",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users/{id}",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"{id}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Aduce detalii despre o resursa in functie de mentiunea acesteia",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/{resource}/{id}",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"{resource}",
						"{id}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Modifica  o resursa in functie de mentiunea acesteia",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.updatedAt).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"UpdatedAt is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"Invalid date format\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Verify the request URL is correct\", function () {",
							"    pm.expect(pm.request.url.toString()).to.equal(\"https://reqres.in/api/{resource}/{id}\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/{resource}/{id}",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"{resource}",
						"{id}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Modifica Anumite detalii ale unei resurse in functie de mentiunea acesteia",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field 'updatedAt'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.updatedAt).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"UpdatedAt field is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"UpdatedAt field should be in valid date format\");",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Id in the request URL matches the id in the response\", function () {",
							"    const requestUrl = pm.request.url;",
							"    const requestId = requestUrl.match(/\\/api\\/\\w+\\/(\\d+)/)[1]; // Extract id from the request URL",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.id).to.equal(requestId);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/{resource}/{id}",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"{resource}",
						"{id}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sterge o anumita resursa",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/{resource}/{id}",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"{resource}",
						"{id}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Inregistreaza/Creaza un user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"  pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Error message is present in the response\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.error).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Error message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"Flavius\",\r\n  \"email\": \"flaviusss@gmail.com\",\r\n  \"password\": \"string\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/register",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logeaza un user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"  pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.error).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Error message is present and not empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.error).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response body is not empty\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData).to.not.be.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"Flavius\",\r\n  \"email\": \"flaviusss@gmail.com\",\r\n  \"password\": \"string\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/login",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delogeaza un user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the expected Content-Type header\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response schema is valid JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.not.be.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/logout",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"logout"
					]
				}
			},
			"response": []
		}
	]
}